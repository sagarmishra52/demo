usersDB.cancelBooking = ( bookingId ) => {
    return connection.getBookingCollection().then( ( collection ) => {
        return collection.find( { "bookingId": bookingId }, { __v: 0, _id: 0 } ).then( ( booking ) => {
            return connection.getUserCollection().then( ( ucollection ) => {
                const userId = booking[0].userId
                return ucollection.update( { "userId": userId }, { $pull: { "bookings": bookingId } } ).then( ( update ) => {
                    if( update.nModified > 0 ) {
                        return collection.deleteOne( { "bookingId": bookingId } ).then( ( data ) => {
                            if( data.deletedCount > 0 ) {
                                return data
                            } else{
                                return null
                            }
                        } )
                    } else{
                        return null
                    }
                } )
            } )
        } )
    } )
}


router.delete( '/cancelBooking/:bookingId', ( req, res, next ) => {
    let bookingId = req.params.bookingId
    return userservice.cancelBooking( bookingId ).then( ( data ) => {
        console.log( data );
        res.json( { message: "Successfully deleted the booking with id " + bookingId } )
    } ).catch( ( err ) => {
        next( err )
    } )
} )


userService.cancelBooking = ( bookingId ) => {
    return userDB.cancelBooking( bookingId ).then( ( data ) => {
        if( data.deletedCount > 0 ) {
            return data
        } else{
            let err = new Error( "Sorry unable to delete Booking!!!" )
            err.status = 500
            throw err
        }
    } )
}
